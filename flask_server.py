"""
Cross-origin MFMCi Server
===================
This is a minimal server for using MFMCi to serve your domain.

:copyright: (C) 2016 by Sean McGregor.
:license:   MIT, see LICENSE for more details.
"""
from flask import Flask, jsonify, request
from flask.ext.cors import cross_origin
from MFMCi import MFMCi
import importlib

print """
Starting Flask Server...
Note, you may be able to specify a domain at this point by adding it as a
positional argument. (todo)
"""

domain_name = "wildfire" # todo: use argparse
mfmci = MFMCi(domain_name)
policy_module = importlib.import_module("databases." + domain_name + ".policies")
policy_factory = policy_module.policy_factory
annotations = importlib.import_module("databases." + domain_name + ".annotate")
initialization_object = annotations.mdpvis_initialization_object

app = Flask('mfmci', static_folder='.', static_url_path='')

@app.route("/", methods=['GET'])
@cross_origin()
def site_root():
    '''
        This view has CORS enabled for all domains, representing the simplest
        configuration of view-based decoration. You can test this endpoint
        with:

        $ curl --include -X GET http://127.0.0.1:5000/ \
            --header Origin:www.examplesite.com

        Which should return something like:

        >> HTTP/1.0 200 OK
        Content-Type: text/html; charset=utf-8
        Content-Length: 186
        Access-Control-Allow-Origin: www.examplesite.com
        Server: Werkzeug/0.10.4 Python/2.7.9
        Date: Tue, 19 May 2015 17:13:39 GMT

        THE DOCUMENT FOUND BELOW
    '''
    return '''
        <h1>Hello World!</h1>
        <p style='font-size: 150%;'>Your server is running and ready for
        integration.</p>
        <p  style='font-size: 150%;'>To test the other endpoints, visit
          <a href="/initialize">/initialize</a>,
          <a href="/trajectories">/trajectories</a>,
          <a href="/optimize">/optimize</a>, or
          <a href="/state">/state</a>
        '''

@app.route("/initialize", methods=['GET'])
@cross_origin(allow_headers=['Content-Type'])
def cross_origin_initialize():
    '''
        Asks the domain for the parameters to seed the visualization.
    '''
    return jsonify(initialization_object)

@app.route("/trajectories", methods=['GET'])
@cross_origin(allow_headers=['Content-Type'])
def cross_origin_trajectories():
    '''
        Asks the domain for the trajectories generated by the
        requested parameters.
    '''
    count = int(request.args["Sample Count"])
    horizon = int(request.args["Horizon"])
    erc_threshold = int(request.args["ERC Threshold"])
    days_threshold = int(request.args["Days Until End of Season Threshold"])

    trajectories = mfmci.get_visualization_trajectories(
        count=count, horizon=horizon,
        policy=policy_factory({
            "erc_threshold": erc_threshold,
            "time_until_end_of_fire_season_threshold": days_threshold
        }
    ))
    json_obj = {"trajectories": trajectories}
    resp = jsonify(json_obj)
    return resp

# Binds the server to port 8938 and listens to all IP addresses.
if __name__ == "__main__":
    print("Starting server...")
    app.run(host='0.0.0.0', port=8938, debug=True, use_reloader=False, threaded=True)
    print("...started")
